name: Build and Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always
  APP_NAME: "Frame Classifier"

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: aarch64-apple-darwin
    
    - name: Install cargo-bundle
      run: cargo install cargo-bundle
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Create Icon
      run: |
        mkdir icon.iconset
        sips -z 16 16     icon.png --out icon.iconset/icon_16x16.png
        sips -z 32 32     icon.png --out icon.iconset/icon_16x16@2x.png
        sips -z 32 32     icon.png --out icon.iconset/icon_32x32.png
        sips -z 64 64     icon.png --out icon.iconset/icon_32x32@2x.png
        sips -z 128 128   icon.png --out icon.iconset/icon_128x128.png
        sips -z 256 256   icon.png --out icon.iconset/icon_128x128@2x.png
        sips -z 256 256   icon.png --out icon.iconset/icon_256x256.png
        sips -z 512 512   icon.png --out icon.iconset/icon_256x256@2x.png
        sips -z 512 512   icon.png --out icon.iconset/icon_512x512.png
        sips -z 1024 1024 icon.png --out icon.iconset/icon_512x512@2x.png
        iconutil -c icns icon.iconset
        rm -R icon.iconset
    
    - name: Build App Bundle
      run: |
        cargo bundle --target aarch64-apple-darwin --release
        cp -r "target/aarch64-apple-darwin/release/bundle/osx/${{ env.APP_NAME }}.app" .
    
    - name: Create DMG
      run: |
        mkdir -p "tmp-dmg"
        cp -r "${{ env.APP_NAME }}.app" "tmp-dmg/"
        ln -s /Applications "tmp-dmg/Applications"
        hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder "tmp-dmg" -ov -format UDZO "${{ env.APP_NAME }}.dmg"
        rm -rf "tmp-dmg"
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.APP_NAME }}.dmg
        name: Release ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}